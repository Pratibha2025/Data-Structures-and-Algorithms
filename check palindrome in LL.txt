class Solution {
public:
    ListNode* reverse(ListNode* head) {
        ListNode *prev=NULL;
        ListNode *curr=head;
        ListNode *forward;
        while(curr!=NULL){
            forward=curr->next;
           curr->next=prev;
            prev=curr;
            curr=forward;  
        }return prev; 
    }
    int getlen(ListNode* head){
        ListNode *temp=head;
        int cnt=0;
        while(temp!=NULL){
            cnt++;
            temp=temp->next;
        }return cnt;
    }
     ListNode* middle(ListNode* head,int n){
         ListNode *temp=head;
         for(int i=0;i<(n/2)-1;i++){
             temp=temp->next;
         }if(n%2==0)return temp;
         else return temp->next;
     }
       bool isPalindrome(ListNode* head) {
        if(head->next==NULL){return true;}
        if(head->next->next==NULL){
            if(head->val==head->next->val){return true;}
            else return false;
        }
         int n=getlen(head);
        ListNode *mid=middle(head,n);
            mid->next=reverse(mid->next);
        
         ListNode *head1=head;
         ListNode *head2=mid->next; 
         while(head2!=NULL){
             if(head1->val!=head2->val){
                 return false;
             }head1=head1->next;
             head2=head2->next;
         }return true;
    }
};