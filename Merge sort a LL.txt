class Solution {
public:
ListNode *solve(ListNode* list1, ListNode* list2){
    if(list1->next==NULL){
        list1->next=list2;
        return list1;
    }
    ListNode *curr1 = list1;
    ListNode *next1=curr1->next;
    ListNode *curr2 = list2;
    ListNode *next2=curr2->next;
    while(curr1!=NULL&&curr2!=NULL){
        if(curr2->val>=curr1->val && curr2->val<=next1->val){
            curr1->next=curr2;
            next2=curr2->next;
            curr2->next=next1;
            curr1=curr2;
            curr2=next2;
        }else{
            curr1=next1;
            next1=next1->next;
            if(next1==NULL){
                curr1->next=curr2;
                return list1;
            }
        }

    }return list1;
}
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
       if(list1==NULL) return list2; 
       if(list2==NULL) return list1; 
       if(list1->val<=list2->val){
           return solve(list1,list2);
       }
        else{
        return solve(list2,list1); 
        }  
    }
   
ListNode * middle(ListNode* head){
    ListNode* slow=head;
    ListNode* fast=head->next;
     while( fast!=NULL&&fast->next!=NULL){
       fast=fast->next->next;
       slow=slow->next;
     }return slow;
}
    ListNode* sortList(ListNode* head) {
        if(head==NULL){
            return NULL;
        }
        if(head->next==NULL){
            return head;
        }
       
       ListNode *mid=middle(head);
       ListNode *temp=mid->next;
       mid->next=NULL;
     
      ListNode* a=sortList(head); 
      ListNode* b=sortList(temp);
      ListNode* c=  mergeTwoLists(a,b);
       return c;
    }
};